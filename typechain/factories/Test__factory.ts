/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import { Contract, ContractFactory, Overrides } from "@ethersproject/contracts";

import type { Test } from "../Test";

export class Test__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(overrides?: Overrides): Promise<Test> {
    return super.deploy(overrides || {}) as Promise<Test>;
  }
  getDeployTransaction(overrides?: Overrides): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Test {
    return super.attach(address) as Test;
  }
  connect(signer: Signer): Test__factory {
    return super.connect(signer) as Test__factory;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Test {
    return new Contract(address, _abi, signerOrProvider) as Test;
  }
}

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "key",
        type: "bytes",
      },
    ],
    name: "encryptDecrypt",
    outputs: [
      {
        internalType: "bytes",
        name: "result",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506103d5806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063e715032214610030575b600080fd5b61004361003e366004610237565b610059565b6040516100509190610312565b60405180910390f35b8251604080518083016020019091528181529061007585610130565b6100b484848080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061013092505050565b60005b818110156101275760008585836040516020016100d693929190610367565b6040516020818303038152906040528051906020012090506100f781610176565b86820160200151811861010981610176565b806020840186015250506020816101209190610379565b90506100b7565b50509392505050565b610173816040516024016101449190610312565b60408051601f198184030181529190526020810180516001600160e01b03166305f3bfab60e11b1790526101b7565b50565b6101738160405160240161018c91815260200190565b60408051601f198184030181529190526020810180516001600160e01b03166327b7cf8560e01b1790525b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b634e487b7160e01b600052604160045260246000fd5b60008083601f84011261020057600080fd5b50813567ffffffffffffffff81111561021857600080fd5b60208301915083602082850101111561023057600080fd5b9250929050565b60008060006040848603121561024c57600080fd5b833567ffffffffffffffff8082111561026457600080fd5b818601915086601f83011261027857600080fd5b81358181111561028a5761028a6101d8565b604051601f8201601f19908116603f011681019083821181831017156102b2576102b26101d8565b816040528281528960208487010111156102cb57600080fd5b8260208601602083013760006020848301015280975050505060208601359150808211156102f857600080fd5b50610305868287016101ee565b9497909650939450505050565b600060208083528351808285015260005b8181101561033f57858101830151858201604001528201610323565b81811115610351576000604083870101525b50601f01601f1916929092016040019392505050565b82848237909101908152602001919050565b6000821982111561039a57634e487b7160e01b600052601160045260246000fd5b50019056fea2646970667358221220a2eebb7da1207e201c76da908b92a469cfa94f8b27ef1a2ea1a2f72a193129db64736f6c63430008090033";
